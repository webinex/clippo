"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[679],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return t?i.createElement(f,a(a({ref:n},p),{},{components:t})):i.createElement(f,a({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<o;c++)a[c]=t[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3086:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=t(7462),r=(t(7294),t(3905));const o={title:"Model Definition",sidebar_position:1},a="Model Definition",l={unversionedId:"advanced-guides/model-definition",id:"advanced-guides/model-definition",title:"Model Definition",description:"Model definition needed to construct dynamic queries to database and operate your model.",source:"@site/docs/advanced-guides/model-definition.md",sourceDirName:"advanced-guides",slug:"/advanced-guides/model-definition",permalink:"/clippo/docs/advanced-guides/model-definition",draft:!1,editUrl:"https://github.com/webinex/clippo/tree/main/docs/docs/advanced-guides/model-definition.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Model Definition",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Types & Services",permalink:"/clippo/docs/types"},next:{title:"Custom Blob Store",permalink:"/clippo/docs/advanced-guides/custom-blob-store"}},s={},c=[],p={toc:c},d="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"model-definition"},"Model Definition"),(0,r.kt)("p",null,"Model definition needed to construct dynamic queries to database and operate your model."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class AttachmentModelDefinitionConfiguration : ClippoModelDefinitionConfiguration<Attachment>\n{\n    protected override void Configure(ClipModelBuilder<Attachment> model)\n    {\n        model\n            .HasId(x => x.Id)\n            .HasOwnerType(x => x.OwnerType)\n            .HasOwnerId(x => x.OwnerId)\n            .HasDirectory(x => x.Directory)\n            .HasActive(x => x.Active)\n            .HasSizeBytes(x => x.SizeBytes)\n            .HasFileName(x => x.FileName)\n            .HasMimeType(x => x.MimeType)\n            .HasReference(x => x.Reference)\n            .HasNew((values) => new Attachment(values))\n            .HasSetValues((attachment, values) => attachment.SetValues(values));\n    }\n}\n")),(0,r.kt)("p",null,"Registration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"services.AddClippo<Attachment>(x => x\n    .AddModelDefinitionConfiguration<AttachmentModelDefinitionConfiguration>();\n")),(0,r.kt)("p",null,"If you have simple ",(0,r.kt)("inlineCode",{parentName:"p"},"Clip")," implementation, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},".UseDefaultConstructor()")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"HasNew")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"HasSetValues")," in this case, your entity might have public parameterless constructor or constructor with single ",(0,r.kt)("inlineCode",{parentName:"p"},"IDictionary<string, object>")," parameter.  "),(0,r.kt)("p",null,"When you using parameterless constructor, after creating new instance, ",(0,r.kt)("inlineCode",{parentName:"p"},"HasSetValues")," delegate would be called (if specified).   "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class Attachment {\n  public Attachment() {\n    // ...\n  }\n}\n")),(0,r.kt)("p",null,"or "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class Attachment {\n  public Attachment([NotNull] IDictionary<string, object> values) {\n    // ...\n  }\n}\n")),(0,r.kt)("p",null,"When you need scoped services, you might define ",(0,r.kt)("inlineCode",{parentName:"p"},"IClippoModelDefinition<TClip>"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public interface IClippoModelDefinition<TClip>\n{\n    Expression<Func<TClip, object>> Id { get; }\n    Expression<Func<TClip, string>> OwnerType { get; }\n    Expression<Func<TClip, string>> OwnerId { get; }\n    Expression<Func<TClip, string>> Directory { get; }\n    Expression<Func<TClip, bool>> Active { get; }\n    Expression<Func<TClip, int>> SizeBytes { get; }\n    Expression<Func<TClip, string>> FileName { get; }\n    Expression<Func<TClip, string>> MimeType { get; }\n    Expression<Func<TClip, string>> Reference { get; }\n    TClip New(IDictionary<string, object> values);\n    void SetValues(TClip clip, IDictionary<string, object> values);\n}\n")),(0,r.kt)("p",null,"And register it, it would be registered as scoped service, so you can inject scoped services"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"services.AddClippo<Attachment>(x => x\n    .AddModelDefinition<AttachmentModelDefinition>();\n")))}u.isMDXComponent=!0}}]);