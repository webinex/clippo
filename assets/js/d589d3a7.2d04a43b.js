"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[162],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?i.createElement(g,a(a({ref:t},c),{},{components:n})):i.createElement(g,a({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:r,a[1]=l;for(var s=2;s<o;s++)a[s]=n[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9390:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var i=n(7462),r=(n(7294),n(3905));const o={title:"Getting Started",sidebar_position:2},a="Getting Started",l={unversionedId:"getting-started",id:"getting-started",title:"Getting Started",description:"Install Nuget package",source:"@site/docs/getting-started.md",sourceDirName:".",slug:"/getting-started",permalink:"/clippo/docs/getting-started",draft:!1,editUrl:"https://github.com/webinex/clippo/tree/main/docs/docs/getting-started.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Getting Started",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/clippo/docs/intro"},next:{title:"Mapping",permalink:"/clippo/docs/mapping"}},p={},s=[{value:"Install Nuget package",id:"install-nuget-package",level:2},{value:"Create a model",id:"create-a-model",level:2},{value:"Create a model definition",id:"create-a-model-definition",level:2},{value:"EFCore usage",id:"efcore-usage",level:2},{value:"Register services",id:"register-services",level:2},{value:"Add controller",id:"add-controller",level:2},{value:"Usage",id:"usage",level:2},{value:"Client side",id:"client-side",level:3},{value:"Server side",id:"server-side",level:3}],c={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"getting-started"},"Getting Started"),(0,r.kt)("h2",{id:"install-nuget-package"},"Install Nuget package"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"dotnet add package Webinex.Wispo\n")),(0,r.kt)("h2",{id:"create-a-model"},"Create a model"),(0,r.kt)("p",null,"It can be actually any model, names of properties are not regulated.\nAs well, you can add additional properties to model.  "),(0,r.kt)("admonition",{title:"Public Getters and Setters",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"All fields except ",(0,r.kt)("inlineCode",{parentName:"p"},"Id")," might have public getters and setters")),(0,r.kt)("admonition",{title:"EF Core",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"When you using EFCore, ",(0,r.kt)("inlineCode",{parentName:"p"},"Id"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"OwnerType"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"OwnerId"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Directory")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Active")," might be\nplain properties, because they would be used to construct queries to database.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class Attachment\n{\n    public Guid Id { get; set; }\n    public string OwnerType { get; set; }\n    public string OwnerId { get; set; }\n    public string Directory { get; set; }\n    public bool Active { get; set; }\n    public string FileName { get; set; }\n    public string MimeType { get; set; }\n    public int SizeBytes { get; set; }\n    public string Reference { get; set; }\n}\n")),(0,r.kt)("h2",{id:"create-a-model-definition"},"Create a model definition"),(0,r.kt)("p",null,"Model definition needed to construct dynamic queries to database and operate your model.\nWhen you using ",(0,r.kt)("inlineCode",{parentName:"p"},".UseDefaultConstructor()")," your entity might have public parameterless constructor\nor constructor with single ",(0,r.kt)("inlineCode",{parentName:"p"},"IDictionary<string, object>")," parameter.  "),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"/docs/advanced-guides/model-definition"},"Advanced Guide")," for additional details.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class AttachmentModelDefinitionConfiguration : ClippoModelDefinitionConfiguration<Attachment>\n{\n    protected override void Configure(ClipModelBuilder<Attachment> model)\n    {\n        model\n            .HasId(x => x.Id)\n            .HasOwnerType(x => x.OwnerType)\n            .HasOwnerId(x => x.OwnerId)\n            .HasDirectory(x => x.Directory)\n            .HasActive(x => x.Active)\n            .HasSizeBytes(x => x.SizeBytes)\n            .HasFileName(x => x.FileName)\n            .HasMimeType(x => x.MimeType)\n            .HasReference(x => x.Reference)\n            .UseDefaultConstructor();\n    }\n}\n")),(0,r.kt)("h2",{id:"efcore-usage"},"EFCore usage"),(0,r.kt)("p",null,"Add ",(0,r.kt)("inlineCode",{parentName:"p"},"IClippoDbContext<Attachment>")," to your DbContext"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"internal class MyDbContext : DbContext, IClippoDbContext<Attachment>\n{\n    public DbSet<Attachment> Clips { get; set; }\n}\n")),(0,r.kt)("h2",{id:"register-services"},"Register services"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'services.AddClippo<Attachment>(x => x\n    .AddDbContext<MyDbContext>()\n    .AddFileSystemStore("D://your-files-folder")\n    .AddModelDefinitionConfiguration<AttachmentModelDefinitionConfiguration>()\n    .Interceptors\n    .AddDbContextSaveChanges());\n')),(0,r.kt)("h2",{id:"add-controller"},"Add controller"),(0,r.kt)("p",null,"It would add controller used by frontend library on ",(0,r.kt)("inlineCode",{parentName:"p"},"/api/clippo"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"services\n    .AddControllers()\n    // ....\n    .AddClippoJson() // Adds built-in actions mapping\n    .AddClippoController<Attachment>() // Default controller registration\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"client-side"},"Client side"),(0,r.kt)("p",null,"Defined global client"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"typescript",typescript:!0},"import axios from 'axios';\nimport { useClippo, ClippoOptions } from '@webinex/clippo';\n\nexport interface AttachmentDto {\n  id: string;\n  ownerType?: string;\n  ownerId?: string;\n  directory?: string;\n  active: boolean;\n  fileName: string;\n  mimeType: string;\n  sizeBytes: number;\n  reference: string;\n}\n\nconst axiosInstance = axios.create({ baseURL: '/api/clippo' });\n\naxiosInstance.interceptors.request.use(async (request) => {\n  request.headers['authorization'] = ... get your access token;\n  return request;\n});\n\nexport function useAppClippo(options: ClippoOptions<AttachmentDto>) {\n  return useClippo({ axios: axiosInstance, ...options });\n}\n")),(0,r.kt)("p",null,"Use your clippo client"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"typescript",typescript:!0},"import { useDropzone } from 'react-dropzone';\nimport { useAppClippo } from './clippoClient';\n\nfunction MyComponent({ id }: { id: string }) {\n  const {\n    fetch,\n    store,\n    getById,\n    content,\n    apply,\n    open,\n    remove,\n    stage,\n    value,\n    setValue,\n    update,\n    originalItems,\n  } = useAppClippo({\n    ownerId: id,\n    ownerType: 'OwnerType',\n  });\n\n  const {\n    getRootProps,\n    getInputProps,\n    open: openDialog,\n  } = useDropzone({\n    onDrop: store,\n    noClick: true,\n  });\n\n  return (\n    <div {...getRootProps()}>\n      <input {...getInputProps()} />\n\n      <div>\n        Drop files or click <button onClick={openDialog}>Open</button> to upload files\n      </div>\n\n      <ul>\n        {value.items.map((item) => (\n          <li key={item.id}>\n            {item.fileName} <button onClick={() => remove(item.id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n")),(0,r.kt)("p",null,'If you want changes to be applied only with save of "container" entity, you can use ',(0,r.kt)("em",{parentName:"p"},"defer")," mode.\nIn this case, uploaded entities would not be linked to owner, removes would not be called to server.\nInstead, all this actions would be saved to ",(0,r.kt)("inlineCode",{parentName:"p"},"value.actions")," and you can use it when would save your entity."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"typescript",typescript:!0},"const {\n    ...\n} = useAppClippo({\n    ownerId: id,\n    ownerType: 'OwnerType',\n    defer: true\n});\n")),(0,r.kt)("h3",{id:"server-side"},"Server side"),(0,r.kt)("p",null,"When you using clippo in ",(0,r.kt)("em",{parentName:"p"},"defered")," mode"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class YourBusinessService\n{\n    private readonly IClippo<Attachment> _clippo;\n\n    public async Task SaveAsync(BusinessEntity entity)\n    {\n        await _clippo.ApplyAsync(entity.Actions);\n    }\n}\n")),(0,r.kt)("p",null,"For actions, which was created for draft entity (entity existing on client side only, not saved previously to database),\nyou might call ",(0,r.kt)("inlineCode",{parentName:"p"},"ApplyAsync")," extension method, it would automatically update ",(0,r.kt)("inlineCode",{parentName:"p"},"ActivateClipAction"),"s with supplied parameters.  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"await _clippo.ApplyAsync(entity.Actions, ownerType, ownerId, directory);\n")))}u.isMDXComponent=!0}}]);