"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[254],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>C});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=i.createContext({}),c=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return i.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=r(e,["components","mdxType","originalType","parentName"]),m=c(n),u=o,C=m["".concat(p,".").concat(u)]||m[u]||d[u]||a;return n?i.createElement(C,l(l({ref:t},s),{},{components:n})):i.createElement(C,l({ref:t},s))}));function C(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=u;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r[m]="string"==typeof e?e:o,l[1]=r;for(var c=2;c<a;c++)l[c]=n[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7405:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var i=n(7462),o=(n(7294),n(3905));const a={title:"Actions",sidebar_position:3},l="Actions",r={unversionedId:"extensions/extensions-actions",id:"extensions/extensions-actions",title:"Actions",description:"Description",source:"@site/docs/extensions/extensions-actions.md",sourceDirName:"extensions",slug:"/extensions/extensions-actions",permalink:"/clippo/docs/extensions/extensions-actions",draft:!1,editUrl:"https://github.com/webinex/clippo/tree/main/docs/docs/extensions/extensions-actions.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Actions",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Interceptors",permalink:"/clippo/docs/extensions/extensions-interceptors"}},p={},c=[{value:"Description",id:"description",level:2},{value:"Built-in Actions",id:"built-in-actions",level:2},{value:"Example",id:"example",level:2},{value:"Server Side",id:"server-side",level:3},{value:"Client Side",id:"client-side",level:3}],s={toc:c},m="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,i.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"actions"},"Actions"),(0,o.kt)("h2",{id:"description"},"Description"),(0,o.kt)("p",null,"Actions was originally designed for ",(0,o.kt)("em",{parentName:"p"},"defered")," behavior. When on client side we need to update clips only\nafter click on ",(0,o.kt)("em",{parentName:"p"},"Save")," button. But now, they can be used to extend clippo behavior. They can contain additional properties\nand can be called from client side or from backend ",(0,o.kt)("inlineCode",{parentName:"p"},"IClippo<TClip>.ApplyAsync"),".  "),(0,o.kt)("p",null,"Actions might have corresponding ",(0,o.kt)("inlineCode",{parentName:"p"},"ClippoActionHandler<TClip, TAction>")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"ClippoNewActionHandler<TClip, TAction>")," implementations.\n",(0,o.kt)("inlineCode",{parentName:"p"},"ClippoActionHandler<TClip, TAction>")," would be called when ",(0,o.kt)("inlineCode",{parentName:"p"},"clippo.ApplyAsync(...)")," called. ",(0,o.kt)("inlineCode",{parentName:"p"},"ClippoNewActionHandler<TClip, TAction>")," would be called when ",(0,o.kt)("inlineCode",{parentName:"p"},"StoreClipArgs.Actions")," contains action.  "),(0,o.kt)("p",null,"Implementations of ",(0,o.kt)("inlineCode",{parentName:"p"},"IClippoActionHandler<TClip>")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"IClippoNewActionHandler<TClip>")," called on every\naction (if you need to add common behavior for all actions).  "),(0,o.kt)("h2",{id:"built-in-actions"},"Built-in Actions"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/webinex/starter-kit/blob/master/src/StarterKit/Webinex.Clippo.Abstractions/ActivateClippoAction.cs"},"ActivateClippoAction"),"\nactivates previously created clip"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/webinex/starter-kit/blob/master/src/StarterKit/Webinex.Clippo.Abstractions/ActivateNewClippoAction.cs"},"ActivateNewClippoAction")," this action might be in StoreClipArgs.Actions to immediately activate new clip"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/webinex/starter-kit/blob/master/src/StarterKit/Webinex.Clippo.Abstractions/DeleteClipAction.cs"},"DeleteClipAction")," deletes clip"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/webinex/starter-kit/blob/master/src/StarterKit/Webinex.Clippo.Abstractions/SetValuesClippoAction.cs"},"SetValuesClippoAction")," calls SetValues against clip entity")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("h3",{id:"server-side"},"Server Side"),(0,o.kt)("p",null,"For example, we need to add Comments behavior to clips:  "),(0,o.kt)("p",null,"Create action:  "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"public class ClippoCommentAction : IClippoAction\n{\n    public ClippoCommentAction(\n        [NotNull] string id,\n        [NotNull] string comment)\n    {\n        Id = id ?? throw new ArgumentNullException(nameof(id));\n        Comment = comment ?? throw new ArgumentNullException(nameof(comment));\n    }\n\n    [NotNull] public string Id { get; }\n    [NotNull] public string Comment { get; }\n}\n")),(0,o.kt)("p",null,"If you using default controller, you might add action to serialization settings:  "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c#"},'mvcBuilder\n    // ....\n    .AddClippoJson(x => x\n      // actions with action.kind == "myactions://Comment" would be deserialized to ClippoCommentAction\n      .AddAction("myactions://Comment", typeof(ClippoCommentAction)))\n    .AddClippoController<Attachment>()\n')),(0,o.kt)("p",null,"Add action handler:  "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"internal class ClippoCommentActionHandler : ClippoActionHandler<Attachment, ClippoCommentAction>\n{\n    private readonly IClippoStore<Attachment> _clippoStore;\n\n    public ClippoCommentActionHandler(IClippoStore<Attachment> clippoStore)\n    {\n        _clippoStore = clippoStore;\n    }\n\n    protected override async Task<CodedResult> HandleAsync(ClippoCommentAction action)\n    {\n        var clip = await _clippoStore.ByIdAsync(action.Id);\n        if (clip == null) return ClippoCodes.Results.NotFound<TClip>();\n        \n        clip.Comment = action.Comment;\n        await _clippoStore.UpdateAsync(clip);\n\n        return CodedResults.Success();\n    }\n}\n")),(0,o.kt)("p",null,"Register it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"public void ConfigureServices(IServiceCollection services)\n{\n    // For actions applied on newly created attachments (in Store request)\n    // Our Action doesn't implement it\n    // services.AddScoped<IClippoNewActionHandler<Attachment>, ClippoCommentActionHandler>();\n\n    services.AddScoped<IClippoActionHandler<Attachment>, ClippoCommentActionHandler>();\n}        \n")),(0,o.kt)("p",null,"Use it: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"public class YourService\n{\n    private readonly IClippo<Attachment> _clippo;\n    \n    public async Task AddCommentAsync(Guid attachmentId, string comment)\n    {\n        var action = new ClippoCommentAction(attachmentId.ToString(), comment);\n        await _clippo.ApplyAsync(action);\n    }\n}\n")),(0,o.kt)("h3",{id:"client-side"},"Client Side"),(0,o.kt)("p",null,"Define action:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"jsx",jsx:!0},'class ClippoCommentAction implements ClippoAction {\n    public kind: string = "myactions://Comment";\n    public id: string;\n    public comment: string;\n\n    constructor(id: string, comment: string) {\n        this.id = id;\n        this.comment = comment;\n    }\n}\n')),(0,o.kt)("p",null,"Call it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"jsx",jsx:!0},'const clippo = useClippo({...});\nconst {apply} = clippo;\n\n// in defer mode, it would be saved in actions.\n// In non-defer mode - it would be automatically sent to server.\nawait apply([new ClippoCommentAction("123", "my comment")]);\n')),(0,o.kt)("p",null,"When your action might affect clip items, you might define ",(0,o.kt)("inlineCode",{parentName:"p"},"apply")," method in action."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"apply")," might not mutate value")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"typescript",typescript:!0},'class ClippoCommentAction implements ClippoAction {\n  public kind: string = "myactions://Comment";\n  public id: string;\n  public comment: string;\n\n  constructor(id: string, comment: string) {\n      this.id = id;\n      this.comment = comment;\n  }\n\n  public apply<Attachment>(\n    value: ClippoStateValue<Attachment>,\n    options: ClippoOptions<Attachment>,\n  ) {\n    const { getId } = options.model;\n    const { items } = value;\n\n    return items.map((attachment) => {\n      if (this.id === getId(attachment)) {\n        return { ...attachment, comment: this.comment };\n      }\n\n      return attachment;\n    });\n  }\n}\n')),(0,o.kt)("p",null,"When your action might replace another actions, you might define ",(0,o.kt)("inlineCode",{parentName:"p"},"shake")," method in action."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"typescript",typescript:!0},'class ClippoCommentAction implements ClippoAction {\n  public kind: string = "myactions://Comment";\n  public id: string;\n  public comment: string;\n\n  constructor(id: string, comment: string) {\n      this.id = id;\n      this.comment = comment;\n  }\n  \n  // .....\n\n  public shake(\n    value: ClippoStateValue<Attachment>,\n    options: ClippoOptions<Attachment>,\n  ): ClippoStateValue<Attachment> {\n    const index = value.actions.indexOf(this);\n    const previous = value.actions.slice(0, index);\n    const surplus = value.actions.slice(index);\n\n    const shakedPrevious = previous.filter(action => action.kind !== this.kind || action.id !== this.id);\n\n    return {\n      ...value,\n      actions: [...shakedPrevious, ...surplus],\n    }\n  }\n}\n')))}d.isMDXComponent=!0}}]);